# -*- coding: utf-8 -*-
"""Data_VisualizationStreamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j-Rks4JSiXBkVgGGNH38c4rXVWjtGM4y
"""

import streamlit as st
import pandas as pd
import numpy as np
import time
from datetime import datetime
import matplotlib.pyplot as plt

# Optional caching for data loading
@st.cache_data
def load_data():
    # Replace with actual data loading logic
    data = pd.read_csv('C:\Users\jain4\Downloads\flipdata_44.csv')
    return data

# Load data
data = load_data()

# Title and description for the Streamlit dashboard
st.title("Real-Time Data Dashboard")
st.write("This dashboard provides real-time updates for monitoring data.")

# Sidebar controls for customization
st.sidebar.header("Dashboard Controls")
refresh_rate = st.sidebar.slider("Refresh rate (seconds)", 1, 60, 10)

# Data update with real-time feature
if st.button("Refresh Data"):
    st.experimental_rerun()  # Force refresh data

# Main dashboard display with placeholder
placeholder = st.empty()

# Import required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from datetime import datetime
from wordcloud import WordCloud

# Load the dataset
df = pd.read_excel('flipdata_44.xlsx')
# Replace NaN values with unspecified labels
df['type'] = df['type'].fillna('Unspecified Type')
df['style'] = df['style'].fillna('Unspecified Style')

#1.descibe dataset
df.describe()

# 2. Top Categories by Product Count - Bar Plot
# Get the top 15 categories by product count
top_categories = df['category'].value_counts().head(15)

fig = go.Figure(data=[go.Pie(
    labels=top_categories.index,
    values=top_categories.values,
    hole=0.3,
    textinfo='percent+value',  # Show percentage and value inside the pie slices
    insidetextorientation='auto'  # Automatically adjust text orientation
)])

# Update the layout for title and styling
fig.update_layout(
    annotations=[dict(text='Product', x=0.5, y=0.5, font_size=25, showarrow=False)],
    title_text="Top 15 Categories by Product Count",
    title_x=0.5,  # Center the title
    width=800,  # Increase chart width
    height=600  # Increase chart height
)

# Show the pie chart
fig.show()

# 3.. Top types by Product Count - Bar Plot
# Get the top 15 categories by product count
top_types = df['type'].value_counts().head(15)

fig = go.Figure(data=[go.Pie(
    labels=top_types.index,
    values=top_types.values,
    hole=0.3,
    textinfo='percent+value',  # Show percentage and value inside the pie slices
    insidetextorientation='auto'  # Automatically adjust text orientation
)])

# Update the layout for title and styling
fig.update_layout(
    annotations=[dict(text='Product', x=0.5, y=0.5, font_size=25, showarrow=False)],
    title_text="Top 15 types by Product Count",
    title_x=0.5,  # Center the title
    width=800,  # Increase chart width
    height=600  # Increase chart height
)

# Show the pie chart
fig.show()

# 4. Top brands by Product Count - Bar Plot
# Get the top 15 categories by product count
top_brands = df['brand'].value_counts().head(15)

fig = go.Figure(data=[go.Pie(
    labels=top_brands.index,
    values=top_brands.values,
    hole=0.3,
    textinfo='percent+value',  # Show percentage and value inside the pie slices
    insidetextorientation='auto'  # Automatically adjust text orientation
)])

# Update the layout for title and styling
fig.update_layout(
    annotations=[dict(text='Product', x=0.5, y=0.5, font_size=25, showarrow=False)],
    title_text="Top 15 brands by Product Count",
    title_x=0.5,  # Center the title
    width=800,  # Increase chart width
    height=600  # Increase chart height
)

# Show the pie chart
fig.show()

# 5. Discount Distribution - Histogram with KDE
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='discount_percentage', bins=50, kde=True)
plt.title('Distribution of Discount Percentages', fontsize=12)
plt.xlabel('Discount Percentage')
plt.ylabel('Count')
st.pyplot(plt)

# 6: Discount Distribution by Price Range
df['price_range'] = pd.cut(df['retail_price'],
                          bins=[0, 500, 1000, 5000, 10000, float('inf')],
                          labels=['0-500', '501-1000', '1001-5000', '5001-10000', '10000+'])
#create the boxplot:
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='price_range', y='discount_percentage')
plt.title('Discount Distribution by Price Range')
plt.xlabel('Price Range (Rs)')
plt.ylabel('Discount Percentage')
plt.xticks(rotation=45)
plt.tight_layout()
st.pyplot(plt)

#7.Category-wise Discount Strategy by Price Range-heatmap
plt.figure(figsize=(12, 8))
category_discount_pivot = pd.pivot_table(
    df, values='discount_percentage',
    index='category',
    columns=pd.qcut(df['retail_price'], q=5, labels=['Very Low', 'Low', 'Medium', 'High', 'Very High'], duplicates='drop'),
    aggfunc='mean'
)

sns.heatmap(category_discount_pivot.head(10), annot=True, fmt='.1f', cmap='YlOrRd')
plt.title('Category-wise Discount Strategy by Price Range', fontsize=12)
st.pyplot(plt)

# 8. Discount Trends Over Time - Line Plot with Moving Average
plt.figure(figsize=(12, 6))
daily_discount = df.groupby('date')['discount_percentage'].mean()
plt.plot(daily_discount.index, daily_discount.values, label='Daily Average')
plt.plot(daily_discount.index, daily_discount.rolling(7).mean(), 'r-', label='7-day Moving Average')
plt.title('Discount Trends Over Time', fontsize=12)
plt.xlabel('Date')
plt.ylabel('Average Discount Percentage')
plt.legend()
plt.grid(True)
st.pyplot(plt)

# 9. Rating vs Discount - Hexbin plot
plt.figure(figsize=(12, 8))
rating_discount_mask = (df['product_rating'] > 0) & (df['discount_percentage'] <= 100)
plt.hexbin(x=df[rating_discount_mask]['product_rating'],
           y=df[rating_discount_mask]['discount_percentage'],
           gridsize=20,
           cmap='YlOrRd')
plt.colorbar(label='Count')
plt.title('Rating vs Discount Percentage\nHexbin Density Plot', pad=20)
plt.xlabel('Product Rating')
plt.ylabel('Discount Percentage')

plt.tight_layout()
st.pyplot(plt)

#10. Normalized Average Price, Rating, and Discount by Category
top_categories = df['category'].value_counts().head(50).index
category_stats = df[df['category'].isin(top_categories)].groupby('category').agg({
    'retail_price': 'mean',
    'product_rating': lambda x: x[x > 0].mean(),
    'discount_percentage': 'mean'
}).round(2)
# Normalize the metrics using min-max normalization
category_stats_normalized = (category_stats - category_stats.min()) / (category_stats.max() - category_stats.min())

# Plotting the heatmap
plt.figure(figsize=(15, 25))
sns.heatmap(category_stats_normalized, annot=True, fmt=".2f", cmap='magma')
plt.title('Heatmap of Normalized Average Price, Rating, and Discount by Category', pad=20)
plt.xlabel('Metrics')
plt.ylabel('Category')
plt.tight_layout()
st.pyplot(plt)

# 11. Normalized Average Price, Rating, and Discount by Brand
top_brands = df['brand'].value_counts().head(50).index
brand_stats = df[df['brand'].isin(top_brands)].groupby('brand').agg({
    'retail_price': 'mean',
    'product_rating': lambda x: x[x > 0].mean(),
    'discount_percentage': 'mean'
}).round(2)
# Normalize the metrics using min-max normalization
brand_stats_normalized = (brand_stats - brand_stats.min()) / (brand_stats.max() - brand_stats.min())

# Plotting the heatmap
plt.figure(figsize=(15, 25))
sns.heatmap(brand_stats_normalized, annot=True, fmt=".2f", cmap='Spectral')
plt.title('Heatmap of Normalized Average Price, Rating, and Discount by Brand', pad=20)
plt.xlabel('Metrics')
plt.ylabel('Brand')
plt.tight_layout()
st.pyplot(plt)

# 12. Discount Strategy by Hour - Heatmap
plt.figure(figsize=(12, 8))
df['hour'] = pd.to_datetime(df['time']).dt.hour
df['day_of_week'] = pd.to_datetime(df['date']).dt.day_name()
discount_hour_day = df.pivot_table(values='discount_percentage',
                                 index='day_of_week',
                                 columns='hour',
                                 aggfunc='mean')
sns.heatmap(discount_hour_day, cmap='YlOrRd', annot=True, fmt='.1f')
plt.title('Average Discount Percentage by Hour and Day', fontsize=12)
plt.xlabel('Hour of Day')
plt.ylabel('Day of Week')
st.pyplot(plt)

# 13. Brand Discount Strategy - Bar Plot with Error Bars
top_brands = df['brand'].value_counts().head(40).index
mean_discounts = df[df['brand'].isin(top_brands)].groupby(['brand', 'is_FK_Advantage_product'])['discount_percentage'].mean().reset_index()

# Create a bar plot without error bars
plt.figure(figsize=(25, 10))
sns.barplot(data=mean_discounts, x='brand', y='discount_percentage', hue='is_FK_Advantage_product', errorbar=None)
plt.title('Average Discount Strategy by Brand and FK Advantage Status', fontsize=14)
plt.xticks(rotation=45)
plt.ylabel('Average Discount Percentage')
plt.grid(True)
st.pyplot(plt)

# 14. Brand Portfolio Analysis - Treemap with Multiple Levels
fig = px.treemap(df,
                 path=['brand', 'category', 'style'],
                 values='retail_price',
                 color='discount_percentage',
                 title='Brand Portfolio Analysis')
fig.update_layout(width=1500, height=1000)
fig.show()

# 15. Temporal Price Trends - Dual Axis Plot
fig, ax1 = plt.subplots(figsize=(15, 8))
ax2 = ax1.twinx()

daily_price = df.groupby('date')['retail_price'].mean()
daily_discount = df.groupby('date')['discount_percentage'].mean()

ax1.plot(daily_price.index, daily_price.values, 'b-', label='Average Price')
ax2.plot(daily_discount.index, daily_discount.values, 'g-', label='Average Discount')

ax1.set_xlabel('Date')
ax1.set_ylabel('Average Price', color='b')
ax2.set_ylabel('Average Discount %', color='g')

plt.title('Temporal Price and Discount Trends', fontsize=12)
st.pyplot(plt)

#16.Product Rating Funnel
ProductCount = len(df)
RatedTotal = len(df[df['product_rating'].notna()])
Top5Stars = len(df[df['product_rating']==5])
funnel_data = pd.DataFrame({ 'stage': ['Total Products', 'Products with Rating', '5-Star Products'], 'Count': [ProductCount, RatedTotal, Top5Stars] })
px.funnel(funnel_data, x='Count', y='stage', title='Product Rating Funnel')

#17.pricing analysis
df[['retail_price', 'discounted_price']].describe()

#18. Price Trends Over Time
price_trends = df.groupby('date')[['retail_price','discounted_price' ]].mean()
plt.figure(figsize=(14,8))
plt.plot(price_trends.index, price_trends['retail_price'], label='Retail Price', marker='o')

plt.plot(price_trends.index, price_trends['discounted_price'], label='Discounted Price', marker='o')

plt.title('Price Trends Over Time')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.grid(True)

st.pyplot(plt)

# 19. Price Range Evolution Over Time
plt.figure(figsize=(20, 30))
price_range_time = pd.crosstab(df['date'], df['price_range'], normalize='index') * 100
sns.heatmap(price_range_time, annot=True, fmt=".1f", cmap="YlGnBu", cbar_kws={'label': 'Percentage of Products'})
plt.title('Price Range Distribution Over Time', fontsize=14)
plt.xlabel('Price Range', fontsize=12)
plt.ylabel('Date', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout(pad=2)
st.pyplot(plt)

# 20. Product Rating Distribution
plt.figure(figsize=(10, 6))
sns.histplot(data=df[df['product_rating'] > 0], x='product_rating', bins=20)
plt.title('Distribution of Product Ratings (Excluding 0 ratings)')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.tight_layout()
st.pyplot(plt)

# 21. Price Distribution
plt.figure(figsize=(10, 6))
price_data = df[df['retail_price'] < df['retail_price'].quantile(0.95)]
sns.histplot(data=price_data, x='retail_price', bins=50, color= '#2E8B57')
plt.title('Distribution of Retail Prices (excluding top 5% outliers)')
plt.xlabel('Retail Price (Rs)')
plt.ylabel('Count')
plt.tight_layout()
st.pyplot(plt)

#22.Five-Star Rating Analysis
prod5stars = df['category'][df['product_rating'] == 5].value_counts()

brand5stars = df['brand'][df['product_rating'] == 5].value_counts()

# Create a DataFrame to combine the outputs

data = {
    'Products Top 5-Star ': prod5stars.head().index,
    'Products Lowest 5 Star ': prod5stars.tail().index,
    'Brands Top 5 Stars': brand5stars.head().index,
    'Brands Lowest 5-Star Rated ': brand5stars.tail().index
}

Top5Star = pd.DataFrame(data)

Top5Star

#23.Time of Day Analysis - Line Plot
plt.figure(figsize=(12, 6))
hourly_products = df['time'].dt.hour.value_counts().sort_index()
plt.plot(hourly_products.index, hourly_products.values, marker='o')
plt.title('Product Listings by Hour of Day', fontsize=12)
plt.xlabel('Hour of Day')
plt.ylabel('Number of Products')
plt.grid(True)
st.pyplot(plt)

# 24. Seasonal Trends - Area Plot
# Pivot table for month vs year heatmap
monthly_sales_heatmap = df.pivot_table(index=df['date'].dt.year, columns=df['date'].dt.month, values='retail_price', aggfunc='count')
plt.figure(figsize=(12, 6))
sns.heatmap(monthly_sales_heatmap, cmap='YlOrBr', annot=True, fmt='.0f')
plt.title('Monthly Product Listing Trends by Year', fontsize=12)
plt.xlabel('Month')
plt.ylabel('Year')
st.pyplot(plt)

#25.Estimated Sales Impact
P=df['retail_price']
Pd=df['discounted_price']
D=df['discount_percentage']
Sales_Impact = (P - Pd) * D
df['sales_impact'] = (df['retail_price'] - df['discounted_price']) * df['discount_percentage'] / 100
df[['retail_price', 'discounted_price', 'sales_impact']][:5]
df['sales_impact'].corr(df['discount_percentage'])
plt.figure(figsize=(14,8))
plt.scatter(df['discount_percentage'], df['sales_impact'], alpha=0.5)

plt.title('Impact of Discounts on Sales')
plt.xlabel('Discount Percentage')
plt.ylabel('Estimated Sales Impact')
plt.grid(True)

st.pyplot(plt)

#26.Word Frequency Analysis

import string
from collections import Counter

#nltk.download('stopwords')
#nltk.download('punkt')
#  !pip install wordcloud
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize
descriptions = df['description'].fillna('').str.split().apply(lambda x: [word.lower() for word in x])

descriptions_str = [" ".join(description) for description in descriptions]
text = " ".join(descriptions_str)
words = word_tokenize(text)
# Remove stopwords
stop_words = set(stopwords.words("english"))
filtered_words = [word for word in words if word.lower() not in stop_words]
stemmer = PorterStemmer()
stemmed_words = [stemmer.stem(word) for word in filtered_words]
Counter(stemmed_words).most_common()[:10]
# Remove common punctuation and numeric symbols
filtered_words = [word for word in stemmed_words if word not in string.punctuation and not word.isdigit()]
Counter(filtered_words).most_common()[:10]
# Custom list of words to exclude
words_to_exclude = [ "'s", "rs", "na", "k", "g", "x", "''", "l", "’", "``", "w", "•", "n't", "etc", "...", "3.5", "0.0", "--", "u", "flipkart.com",'product', 'buy', 'onlin', 'price',]
filtered_words = [word for word in filtered_words if word not in string.punctuation and not word.isdigit()]
filtered_words = [word for word in filtered_words if word not in words_to_exclude]
word_freq = Counter(filtered_words)
Counter(filtered_words).most_common()[:10]
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_freq)
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
st.pyplot(plt)

#27.Visualizing Sentiment Distribution
from textblob import TextBlob

sentiments = []
for description in filtered_words:
    analysis = TextBlob(description)
    if analysis.sentiment.polarity > 0:
        sentiments.append("Positive")
    elif analysis.sentiment.polarity<0:
        sentiments.append("Negative")
    else:
        sentiments.append("Neutral")
Counter(sentiments)

# Count the number of each sentiment
sentiment_counts = {
"Positive": sentiments.count("Positive"),
"Negative": sentiments.count("Negative"),
"Neutral": sentiments.count("Neutral")
}

# Create a bar chart
plt.bar(sentiment_counts.keys(), sentiment_counts.values())
plt.xlabel("Sentiment")
plt.ylabel("Count")
plt.title("Sentiment Distribution of Product Descriptions")

st.pyplot(plt)

# 28. Category-wise Average Price - Horizontal Bar Plot
plt.figure(figsize=(14, 8))
# Calculate the average retail price for each category and sort
cat_avg_price = df.groupby('category')['retail_price'].mean().sort_values(ascending=True).tail(15)
# Create a bar plot
ax = sns.barplot(x=cat_avg_price.values, y=cat_avg_price.index, palette='magma', hue=cat_avg_price.index, dodge=False)
# Add title and labels
plt.title('Top 15 Categories by Average Retail Price', fontsize=12)
plt.xlabel('Average Price (₹)')
plt.ylabel('Category')
plt.legend([], [], frameon=False)
# Annotate each bar with the average price value
for i, value in enumerate(cat_avg_price):
    ax.text(value, i, f'{value:.2f}', va='center', ha='left', color='black')
# Show the plot
st.pyplot(plt)

# 29. Brand Market Share - Treemap using Plotly
fig = px.treemap(df, path=['category','brand'], values='retail_price',
                 title='Brand Market Share by Total Retail Price')
fig.update_layout(width=1500, height=1000)
fig.show()

#30.Product Ratings Distribution by Top Categories
plt.figure(figsize=(15, 8))
sns.stripplot(data=df, x='category', y='product_rating',
              order=df.groupby('category')['product_rating'].mean().sort_values(ascending=False).head(15).index,
              jitter=True, alpha=0.6)

plt.xticks(rotation=45)
plt.title('Product Ratings Distribution by Top Categories', fontsize=12)
plt.xlabel('Category')
plt.ylabel('Product Rating')
st.pyplot(plt)

# 31. Brand Pricing Strategy - Bar Plot
plt.figure(figsize=(12, 18))
avg_price = df.groupby('brand')['retail_price'].mean().sort_values(ascending=False).head(25)
sns.barplot(x=avg_price.values, y=avg_price.index)
plt.title('Average Retail Price by Top Brands', fontsize=12)
plt.xlabel('Average Price')
st.pyplot(plt)

#32. Distribution of Products by Price Range and Rating
# Define price ranges for the 'retail_price' column
def get_price_range(price):
    if price <= 500:
        return '0-500'
    elif price <= 1000:
        return '501-1000'
    elif price <= 2000:
        return '1001-2000'
    elif price <= 5000:
        return '2001-5000'
    elif price <= 10000:
        return '5001-10000'
    else:
        return '10000+'

# Create a copy of the dataframe to avoid modifications to the original
df_copy = df.copy()

# Add a 'price_range' column based on 'retail_price'
df_copy['price_range'] = df_copy['retail_price'].apply(get_price_range)

# Round 'product_rating' to the nearest 0.1 for better grouping in the heatmap
df_copy['product_rating'] = df_copy['product_rating'].round(1)

# Create a count matrix based on price range and product rating
price_rating_count = df_copy.groupby(['product_rating', 'price_range']).size().reset_index(name='count')

# Filter out rows with product_rating of 0
filtered_count = price_rating_count[price_rating_count['product_rating'] != 0]

# Create pivot table for the heatmap
pivot_table = filtered_count.pivot(index='product_rating', columns='price_range', values='count').fillna(0)

# Sort the price range columns in logical order for display
price_order = ['0-500', '501-1000', '1001-2000', '2001-5000', '5001-10000', '10000+']
pivot_table = pivot_table[price_order]

# Create the plot
plt.figure(figsize=(12, 8))

# Create the heatmap
sns.heatmap(pivot_table,
            annot=True,
            fmt='.0f',
            cmap='YlOrRd',
            cbar_kws={'label': 'Number of Products'},
            linewidths=0.5)

# Add titles and labels
plt.title('Distribution of Products by Price Range and Rating', pad=20, fontsize=14)
plt.xlabel('Price Range (₹)', fontsize=12)
plt.ylabel('Product Rating', fontsize=12)

# Rotate x-axis labels for better readability
plt.xticks(rotation=45, ha='right')

# Adjust layout to prevent label cutoff
plt.tight_layout()

# Display the plot
st.pyplot(plt)

#33. Product Hierarchy Distribution

# Create the sunburst chart
fig = px.sunburst(
    df,
    path=['category', 'type', 'style'],
    values='retail_price',
    title='Product Hierarchy Distribution with Missing Values Handled',
    # Custom color settings
    color='retail_price',
    color_continuous_scale='RdBu',
    # Add hover data
    hover_data=['retail_price'],
    # Custom formatting
    custom_data=['retail_price']
)

# Update layout for better visibility
fig.update_layout(
    title={
        'text': 'Product Hierarchy Distribution<br><sup>Including Unspecified Types and Styles</sup>',
        'x': 0.5,
        'xanchor': 'center'
    },
    width=1000,
    height=800
)

# Show the figure
fig.show()

# 34. Category Market Share Over Time
plt.figure(figsize=(25, 45))
category_time = pd.crosstab(df['date'], df['category'])
category_time_pct = category_time.div(category_time.sum(axis=1), axis=0)
sns.heatmap(category_time_pct.T, cmap="YlGnBu", cbar_kws={'label': 'Percentage Share'})
plt.title('Category Market Share Over Time (Heatmap)', fontsize=16)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Category', fontsize=14)
plt.tight_layout()
st.pyplot(plt)

#35.Monthly Market Share of Product Types Over Time
# Resample to monthly averages for smoother trend visualization
type_time = pd.crosstab(df['date'], df['type'])
type_time_pct = type_time.div(type_time.sum(axis=1), axis=0)  # Convert to percentages

# Resample to monthly and fill NaN with 0 for missing months
type_time_sample = type_time_pct.resample('M').mean().fillna(0)

# Create a larger figure for better visualization
plt.figure(figsize=(20, 30))

# Generate a heatmap for the monthly market share of each product type
sns.heatmap(type_time_sample.T, cmap="magma", cbar_kws={'label': 'Market Share (%)'}, annot=False)

# Set title and labels
plt.title('Monthly Market Share of Product Types Over Time', fontsize=16)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Product Type', fontsize=14)

# Rotate x-axis labels for readability
plt.xticks(rotation=45, ha='right')

# Show the plot
plt.tight_layout()
st.pyplot(plt)

# 36. Product Rating Analysis - Grouped Box Plot
plt.figure(figsize=(15, 8))
sns.barplot(x='price_range', y='product_rating', hue='is_FK_Advantage_product', data=df, errorbar='sd', capsize=0.1)
plt.title('Average Product Ratings by Price Range and FK Advantage Status (Bar Plot)', fontsize=12)
plt.xlabel('Price Range')
plt.ylabel('Average Rating')
plt.xticks(rotation=45)
plt.legend(title='FK Advantage', loc='upper right')
st.pyplot(plt)

# 37. Product Launch Timing
df['day_of_week'] = pd.to_datetime(df['date']).dt.day_name()
launch_counts = df.groupby(['day_of_week', 'hour']).size().unstack(fill_value=0)

plt.figure(figsize=(12, 6))
sns.heatmap(launch_counts, cmap='Greens', annot=True, fmt="d")
plt.title('Product Launch Timing Distribution (Heatmap)', fontsize=14)
plt.xlabel('Hour of the Day')
plt.ylabel('Day of the Week')
plt.xticks(range(24))  # Set x-ticks to represent each hour
st.pyplot(plt)
